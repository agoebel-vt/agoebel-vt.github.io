B10 = PDM1/PDM0;B10
total2 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total2 = total2 + (i*exp(part1 + part2))
}
A = total2;A
total3 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)# n-1+C+1
total3 = total3 + exp(part1 + part2)
}
B = total3;B
c_hat = A/B;c_hat
##################### Coding the Problem ###############################
X = dfSinay
total1 = 0
for (i in 1:(length(X)-1)){
n = length(X)
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total1 = total1 + exp(part1 + part2)
#print(total1)
print(part1+part2)
#print(part2)
}
PDM1 = total1 * 1/(n-1);PDM1
PDM0 = exp(lfactorial(sum(X)) + lfactorial(length(X) - sum(X)) - lfactorial(length(X)+1));PDM0
B10 = PDM1/PDM0;B10
total2 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total2 = total2 + (i*exp(part1 + part2))
}
A = total2;A
total3 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)# n-1+C+1
total3 = total3 + exp(part1 + part2)
}
B = total3;B
c_hat = A/B;c_hat
theta_hat = (sum(X)+1)/(length(X)+2);theta_hat
##################### Coding the Problem ###############################
X = dfSkinner
total1 = 0
for (i in 1:(length(X)-1)){
n = length(X)
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total1 = total1 + exp(part1 + part2)
#print(total1)
print(part1+part2)
#print(part2)
}
PDM1 = total1 * 1/(n-1);PDM1
PDM0 = exp(lfactorial(sum(X)) + lfactorial(length(X) - sum(X)) - lfactorial(length(X)+1));PDM0
B10 = PDM1/PDM0;B10
total2 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total2 = total2 + (i*exp(part1 + part2))
}
A = total2;A
total3 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)# n-1+C+1
total3 = total3 + exp(part1 + part2)
}
B = total3;B
c_hat = A/B;c_hat
##################### Coding the Problem ###############################
X = dfStevens
total1 = 0
for (i in 1:(length(X)-1)){
n = length(X)
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total1 = total1 + exp(part1 + part2)
#print(total1)
print(part1+part2)
#print(part2)
}
PDM1 = total1 * 1/(n-1);PDM1
PDM0 = exp(lfactorial(sum(X)) + lfactorial(length(X) - sum(X)) - lfactorial(length(X)+1));PDM0
B10 = PDM1/PDM0;B10
total2 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total2 = total2 + (i*exp(part1 + part2))
}
A = total2;A
total3 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)# n-1+C+1
total3 = total3 + exp(part1 + part2)
}
B = total3;B
c_hat = A/B;c_hat
##################### Coding the Problem ###############################
X = dfStorey
total1 = 0
for (i in 1:(length(X)-1)){
n = length(X)
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total1 = total1 + exp(part1 + part2)
#print(total1)
print(part1+part2)
#print(part2)
}
PDM1 = total1 * 1/(n-1);PDM1
PDM0 = exp(lfactorial(sum(X)) + lfactorial(length(X) - sum(X)) - lfactorial(length(X)+1));PDM0
B10 = PDM1/PDM0;B10
total2 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total2 = total2 + (i*exp(part1 + part2))
}
A = total2;A
total3 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)# n-1+C+1
total3 = total3 + exp(part1 + part2)
}
B = total3;B
c_hat = A/B;c_hat
##################### Coding the Problem ###############################
X = dfSviben
total1 = 0
for (i in 1:(length(X)-1)){
n = length(X)
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total1 = total1 + exp(part1 + part2)
#print(total1)
print(part1+part2)
#print(part2)
}
PDM1 = total1 * 1/(n-1);PDM1
PDM0 = exp(lfactorial(sum(X)) + lfactorial(length(X) - sum(X)) - lfactorial(length(X)+1));PDM0
B10 = PDM1/PDM0;B10
total2 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total2 = total2 + (i*exp(part1 + part2))
}
A = total2;A
total3 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)# n-1+C+1
total3 = total3 + exp(part1 + part2)
}
B = total3;B
c_hat = A/B;c_hat
##################### Coding the Problem ###############################
X = dfTopf
total1 = 0
for (i in 1:(length(X)-1)){
n = length(X)
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total1 = total1 + exp(part1 + part2)
#print(total1)
print(part1+part2)
#print(part2)
}
PDM1 = total1 * 1/(n-1);PDM1
PDM0 = exp(lfactorial(sum(X)) + lfactorial(length(X) - sum(X)) - lfactorial(length(X)+1));PDM0
B10 = PDM1/PDM0;B10
total2 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total2 = total2 + (i*exp(part1 + part2))
}
A = total2;A
total3 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)# n-1+C+1
total3 = total3 + exp(part1 + part2)
}
B = total3;B
c_hat = A/B;c_hat
##################### Coding the Problem ###############################
X = dfTrent
total1 = 0
for (i in 1:(length(X)-1)){
n = length(X)
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total1 = total1 + exp(part1 + part2)
#print(total1)
print(part1+part2)
#print(part2)
}
PDM1 = total1 * 1/(n-1);PDM1
PDM0 = exp(lfactorial(sum(X)) + lfactorial(length(X) - sum(X)) - lfactorial(length(X)+1));PDM0
B10 = PDM1/PDM0;B10
total2 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total2 = total2 + (i*exp(part1 + part2))
}
A = total2;A
total3 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)# n-1+C+1
total3 = total3 + exp(part1 + part2)
}
B = total3;B
c_hat = A/B;c_hat
total1 = 0
for (i in 1:(length(X)-1)){
n = length(X)
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total1 = total1 + exp(part1 + part2)
#print(total1)
print(part1+part2)
#print(part2)
}
##################### Coding the Problem ###############################
X = dfWeinstein
total1 = 0
for (i in 1:(length(X)-1)){
n = length(X)
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total1 = total1 + exp(part1 + part2)
#print(total1)
print(part1+part2)
#print(part2)
}
PDM1 = total1 * 1/(n-1);PDM1
PDM1 = total1 * 1/(n-1);PDM1
PDM0 = exp(lfactorial(sum(X)) + lfactorial(length(X) - sum(X)) - lfactorial(length(X)+1));PDM0
B10 = PDM1/PDM0;B10
total2 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total2 = total2 + (i*exp(part1 + part2))
}
A = total2;A
total3 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)# n-1+C+1
total3 = total3 + exp(part1 + part2)
}
B = total3;B
c_hat = A/B;c_hat
##################### Coding the Problem ###############################
X = dfWerr
total1 = 0
for (i in 1:(length(X)-1)){
n = length(X)
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total1 = total1 + exp(part1 + part2)
#print(total1)
#print(part1+part2)
#print(part2)
}
PDM1 = total1 * 1/(n-1);PDM1
PDM0 = exp(lfactorial(sum(X)) + lfactorial(length(X) - sum(X)) - lfactorial(length(X)+1));PDM0
B10 = PDM1/PDM0;B10
total2 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total2 = total2 + (i*exp(part1 + part2))
}
A = total2;A
total3 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)# n-1+C+1
total3 = total3 + exp(part1 + part2)
}
B = total3;B
c_hat = A/B;c_hat
##################### Coding the Problem ###############################
X = dfWolin
total1 = 0
for (i in 1:(length(X)-1)){
n = length(X)
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total1 = total1 + exp(part1 + part2)
#print(total1)
#print(part1+part2)
#print(part2)
}
PDM1 = total1 * 1/(n-1);PDM1
PDM0 = exp(lfactorial(sum(X)) + lfactorial(length(X) - sum(X)) - lfactorial(length(X)+1));PDM0
B10 = PDM1/PDM0;B10
total2 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total2 = total2 + (i*exp(part1 + part2))
}
A = total2;A
total3 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)# n-1+C+1
total3 = total3 + exp(part1 + part2)
}
B = total3;B
c_hat = A/B;c_hat
##################### Coding the Problem ###############################
X = dfWu
total1 = 0
for (i in 1:(length(X)-1)){
n = length(X)
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total1 = total1 + exp(part1 + part2)
#print(total1)
#print(part1+part2)
#print(part2)
}
PDM1 = total1 * 1/(n-1);PDM1
PDM0 = exp(lfactorial(sum(X)) + lfactorial(length(X) - sum(X)) - lfactorial(length(X)+1));PDM0
B10 = PDM1/PDM0;B10
total2 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total2 = total2 + (i*exp(part1 + part2))
}
A = total2;A
total3 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)# n-1+C+1
total3 = total3 + exp(part1 + part2)
}
B = total3;B
c_hat = A/B;c_hat
##################### Coding the Problem ###############################
X = dfYepez
total1 = 0
for (i in 1:(length(X)-1)){
n = length(X)
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total1 = total1 + exp(part1 + part2)
#print(total1)
#print(part1+part2)
#print(part2)
}
PDM1 = total1 * 1/(n-1);PDM1
PDM0 = exp(lfactorial(sum(X)) + lfactorial(length(X) - sum(X)) - lfactorial(length(X)+1));PDM0
B10 = PDM1/PDM0;B10
total2 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total2 = total2 + (i*exp(part1 + part2))
}
A = total2;A
total3 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)# n-1+C+1
total3 = total3 + exp(part1 + part2)
}
B = total3;B
c_hat = A/B;c_hat
##################### Coding the Problem ###############################
X = dfZola
total1 = 0
for (i in 1:(length(X)-1)){
n = length(X)
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total1 = total1 + exp(part1 + part2)
#print(total1)
#print(part1+part2)
#print(part2)
}
PDM1 = total1 * 1/(n-1);PDM1
PDM0 = exp(lfactorial(sum(X)) + lfactorial(length(X) - sum(X)) - lfactorial(length(X)+1));PDM0
B10 = PDM1/PDM0;B10
total2 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total2 = total2 + (i*exp(part1 + part2))
}
A = total2;A
total3 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)# n-1+C+1
total3 = total3 + exp(part1 + part2)
}
B = total3;B
c_hat = A/B;c_hat
##################### Coding the Problem ###############################
X = dfZukofsky
total1 = 0
for (i in 1:(length(X)-1)){
n = length(X)
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total1 = total1 + exp(part1 + part2)
#print(total1)
#print(part1+part2)
#print(part2)
}
PDM1 = total1 * 1/(n-1);PDM1
PDM0 = exp(lfactorial(sum(X)) + lfactorial(length(X) - sum(X)) - lfactorial(length(X)+1));PDM0
B10 = PDM1/PDM0;B10
total2 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)
total2 = total2 + (i*exp(part1 + part2))
}
A = total2;A
total3 = 0
for (i in 1:(n-1)){
part1 = lfactorial(sum(X[1:i])) + lfactorial(i-sum(X[1:i]))-lfactorial(i+1)
part2 = lfactorial(sum(X[(i+1):(n)])) + lfactorial(n-i-sum(X[(i+1):(n)]))-lfactorial(n-i+1)# n-1+C+1
total3 = total3 + exp(part1 + part2)
}
B = total3;B
c_hat = A/B;c_hat
curve(dbeta(x, shape1=2 , shape2=3 ))
curve(dbeta(x, shape1=5 , shape2=8 ))
5/14
curve(dbeta(x, shape1=.5, shape2=.5))
curve(dbeta(x, shape1=.2, shape2=.2))
curve(dbeta(x, shape1=.1, shape2=.1))
curve(dbeta(x, shape1=8.1, shape2=2.1))
curve(dbeta(x, shape1=100, shape2=100))
curve(dbeta(x, shape1=50, shape2=50))
curve(dbeta(x, shape1=58, shape2=52))
8.1/10.2
58/110
curve(dbeta(x, shape1=80, shape2=30))
curve(dbeta(x, shape1=90, shape2=30))
curve(dbeta(x, shape1=10, shape2=3))
curve(dbeta(x, shape1=10, shape2=2))
curve(dbeta(x, shape1=10, shape2=1.5))
curve(dbeta(x, shape1=10, shape2=1))
curve(dbeta(x, shape1=10, shape2=2))
curve(dbeta(x, shape1=10.5, shape2=2))
curve(dbeta(x, shape1=11, shape2=2))
curve(dbeta(x, shape1=12, shape2=2))
curve(dbeta(x, shape1=15, shape2=2))
curve(dbeta(x, shape1=20, shape2=2))
curve(dbeta(x, shape1=287, shape2=21))
x = "6"
x = "6"
y = "8"
x+y
y = as.numeric(y)
#x+y
x = as.numeric(x)
y = as.numeric(y)
x+y
onetwothree = as.logical(123)
onetwothree
twelve = as.logical(12)
twelve = as.logical(12);twelve
zero = as.logical(0);zero
##########################################
x=11
y=0
y=as.logical(y)
x=as.logical(x)
y=as.logical(y)
x+y
##########################################
onetwothree = as.logical("123");onetwothree
x=as.logical(x)
y=as.logical(y)
x+y
z=x+y
typeof(z)
z
z=x+y;z
library(tinytex)
y<-c(11,7,2,7,4,8,13,3,6,6,15,8,2,4,5,11,11,4,9,3,9,8,5,9,6)
summary(y)
install.packages
install.packages("tidyverse")
install.packages("palmerpenguins")
mpg_discrete = numeric(length = nrow(mtcars))
mpg_discrete <- rep(-1, length(mtcars$mpg))
setwd("C:/Users/Alex/Documents/agoebel-vt.github.io")
